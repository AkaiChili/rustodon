#!/bin/bash
set -euo pipefail

DEFAULT_POSTGRES_HOST="localhost"
DEFAULT_POSTGRES_USER=""
DEFAULT_POSTGRES_PASSWORD=""
DEFAULT_POSTGRES_DATABASE="rustodon"
TRAVIS_BRANCH="${TRAVIS_BRANCH:-""}"
DATABASE_URL="${DATABASE_URL:-""}"

# Ensure rustup and rust are installed
if which rustup 2>/dev/null 1>&2 ; then
  # Ensure that rust is using nightly for library features
  rustup override set $(cat REQUIRED_RUST_NIGHTLY) 2>/dev/null 1>&2
else
  # Installation deferred to user
  echo "You must install rust and rustup, see: https://www.rust-lang.org/en-US/install.html and https://rustup.rs/" >&2
  exit 1
fi

if rustup component list | grep rustfmt-preview | grep installed 2>/dev/null 1>&2 ; then
  echo "rustfmt-preview installed"
else
  rustup component add rustfmt-preview
fi

# Ensure Postgres is installed
if which psql 2>/dev/null 1>&2 ; then
  echo "Postgres installed"
else
  # Installation deferred to user
  echo "You must install Postgres, see: https://www.postgresql.org/download/" >&2
  exit 1
fi

# Don't track changes to .env
git update-index --assume-unchanged .env

if [ -z "${DATABASE_URL}" ]; then
  if grep DATABASE_URL ./.env; then
    echo "Database already setup"
  else
    # Prompt user for local database information
    read -p "Postgres host (default: ${DEFAULT_POSTGRES_HOST}): " POSTGRES_HOST
    read -p "Postgres user (default: ${DEFAULT_POSTGRES_USER}): " POSTGRES_USER
    read -p "Postgres password (default: ${DEFAULT_POSTGRES_PASSWORD}): " POSTGRES_PASSWORD
    read -p "Postgres database (default: ${DEFAULT_POSTGRES_DATABASE}): " POSTGRES_DATABASE
    if [ -z "${POSTGRES_HOST}" ]; then
      POSTGRES_HOST="${DEFAULT_POSTGRES_HOST}"
    fi
    if [ -z "${POSTGRES_USER}" ]; then
      POSTGRES_USER="${DEFAULT_POSTGRES_USER}"
    fi
    if [ -z "${POSTGRES_PASSWORD}" ]; then
      POSTGRES_PASSWORD="${DEFAULT_POSTGRES_PASSWORD}"
    fi
    if [ -z "${POSTGRES_DATABASE}" ]; then
      POSTGRES_DATABASE="${DEFAULT_POSTGRES_DATABASE}"
    fi
    DB_CREDENTIALS=""
    if [ ! -z "${POSTGRES_USER}" ]; then
      if [ -z "${POSTGRES_PASSWORD}" ]; then
        DB_CREDENTIALS="${POSTGRES_USER}@"
      else
        DB_CREDENTIALS="${POSTGRES_USER}:${POSTGRES_PASSWORD}@" 
      fi
    fi
    if [ -z "${POSTGRES_PASSWORD}" ]; then
      DATABASE_URL="postgres://${DB_CREDENTIALS}${POSTGRES_HOST}/${POSTGRES_DATABASE}"
    else
      DATABASE_URL="postgres://${DB_CREDENTIALS}${POSTGRES_HOST}/${POSTGRES_DATABASE}"
    fi
    echo "DATABASE_URL=${DATABASE_URL}"
    echo "DATABASE_URL=${DATABASE_URL}" >> .env
  fi
fi

# Ruby and Sass dependency checks
which bundler 2>/dev/null 1>&2 || gem install bundler
bundle check 2>/dev/null 1>&2 || bundle install

# Diesel CLI install
which diesel 2>/dev/null 1>&2 || cargo install diesel_cli --no-default-features --features="postgres"
which cargo-watch 2>/dev/null 1>&2 || cargo install cargo-watch

# Database creation and migration
diesel database setup --migration-dir=migrations

# Cargo build
if [ -z "${TRAVIS_BRANCH}" ]; then
  cargo build
fi

# Setup complete
echo "Setup is complete, you may run the server with:"
echo "bundle exec foreman start"
